# 1. –ò–º–ø–æ—Ä—Ç –±–æ–ª–æ–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö—ç—Å—ç–≥
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from google_sheet import (
    is_telegram_id_registered, 
    add_register, 
    add_checkin, 
    add_checkout, 
    find_employee_register_row, 
    register_employee_telegram_id
    )

# 2. FSM State —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
class RegisterStates(StatesGroup):
    waiting_for_register_number = State()
    waiting_for_confirm = State()

# 3. –ë–æ—Ç—ã–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ
API_TOKEN = '7352936643:AAE6VU2gzl3URACE6ik3oAbq5SgK0Itdg2g'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# 4. /register –∫–æ–º–∞–Ω–¥ - —à–∏–Ω—ç –±“Ø—Ä—Ç–≥—ç–ª —ç—Ö–ª“Ø“Ø–ª—ç—Ö
@dp.message_handler(commands=['register'])
async def register_handler(message: types.Message):
    user = message.from_user
    if is_telegram_id_registered(user.id):
        await message.reply("–¢–∞ ”©–º–Ω”© –Ω—å –±“Ø—Ä—Ç–≥“Ø“Ø–ª—Å—ç–Ω –±–∞–π–Ω–∞. –î–∞–≤—Ö–∞—Ä –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π!")
        return
    await message.reply(
        "‚ÄºÔ∏è <b>–†–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä—ã–Ω —ç—Ö–Ω–∏–π —Ö–æ—ë—Ä “Ø—Å–≥–∏–π–≥ –¢–û–ú “Ø—Å–≥—ç—ç—Ä –±–∏—á–Ω—ç “Ø“Ø!</b>\n"
        "–ñ–∏—à—ç—ç: <code>–ê–ê88888888</code> (AA –Ω—å —Ç–æ–º “Ø—Å–≥—ç—ç—Ä)\n\n"
        "”®”©—Ä–∏–π–Ω —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä-–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:",
        parse_mode="HTML"
    )
    await RegisterStates.waiting_for_register_number.set()

# 5. –†–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä —à–∞–ª–≥–∞—Ö, –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–≤—á —Ö–∞—Ä—É—É–ª–∞—Ö
@dp.message_handler(state=RegisterStates.waiting_for_register_number)
async def get_register_number(message: types.Message, state: FSMContext):
    register_number = message.text.strip()
    row_number, row = find_employee_register_row(register_number)
    if not row_number:
        await message.reply("–¢–∞–Ω—ã —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä –∞–∂–∏–ª—á–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç–∞–¥ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –ê–¥–º–∏–Ω–¥ —Ö–∞–Ω–¥–∞–Ω–∞ —É—É, —ç—Å–≤—ç–ª –¥—É–≥–∞–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∞–¥ –æ—Ä—É—É–ª–Ω–∞ —É—É:")
        return

    # –¢—É—Ö–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä ”©–º–Ω”© –Ω—å –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞ (employee sheet –¥—ç—ç—Ä telegram_user_id –±–∞–≥–∞–Ω–∞ –±”©–≥–ª”©–≥–¥—Å”©–Ω —ç—Å—ç—Ö)
    if row['telegram_user_id']:
        await message.reply("–≠–Ω—ç —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä–∞–∞—Ä ”©–º–Ω”© –Ω—å –±“Ø—Ä—Ç–≥—ç–ª —Ö–∏–π–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞!")
        return

    await state.update_data(register_number=register_number)

    # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö, –±—É—Ü–∞—Ö —Ç–æ–≤—á—Ç–æ–π Inline Keyboard “Ø“Ø—Å–≥—ç–Ω—ç
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö", callback_data="confirm_register"),
        InlineKeyboardButton("‚ùå –ë—É—Ü–∞—Ö", callback_data="back_register")
    )
    await message.reply(
        f"–¢–∞–Ω—ã —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä: {row['register_number']}\n"
        f"–û–≤–æ–≥: {row['last_name']}\n"
        f"–ù—ç—Ä: {row['first_name']}\n\n"
        "–¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –ó”®–í –±–æ–ª üü¢ ‚Äú–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö‚Äù —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–Ω–∞ —É—É.\n"
        "–¢–∞–Ω—ã –º—ç–¥—ç—ç—ç–ª—ç–ª –ë–£–†–£–£ –±–æ–ª üî¥ ‚Äú–ë—É—Ü–∞—Ö‚Äù —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–∂, —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω –æ—Ä—É—É–ª–Ω–∞ —É—É.",
        reply_markup=kb
    )
    await RegisterStates.waiting_for_confirm.set()

# 6. –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –±–æ–ª–æ–Ω –±—É—Ü–∞—Ö —Ç–æ–≤—á–Ω—ã “Ø–π–ª–¥—ç–ª
@dp.callback_query_handler(state=RegisterStates.waiting_for_confirm)
async def process_register_confirm_callback(query: types.CallbackQuery, state: FSMContext):
    if query.data == "confirm_register":
        data = await state.get_data()
        register_number = data['register_number']
        telegram_user_id = query.from_user.id
        username = query.from_user.username if query.from_user.username else ""

        # Employee sheet-—ç—ç—Å —Ç—É—Ö–∞–π–Ω –∞–∂–∏–ª—Ç–Ω—ã –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö
        _, row = find_employee_register_row(register_number)
        last_name = row['last_name']
        first_name = row['first_name']

        # Attendance sheet-–¥ –±“Ø—Ä—Ç–≥—ç—Ö
        add_register(
            telegram_user_id=telegram_user_id,
            username=username,
            register_number=register_number,
            last_name=last_name,
            first_name=first_name
        )

        # Employee sheet –¥—ç—ç—Ä –º”©–Ω telegram_user_id –±–∞–≥–∞–Ω–∞–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö (–¥–∞–≤—Ö–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞–º–≥–∞–∞–ª–Ω–∞)
        register_employee_telegram_id(register_number, telegram_user_id)

        await query.message.edit_text(
        f"–¢–∞–Ω—ã –±“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! ‚úÖ\n\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä: {register_number}\n"
        f"–û–≤–æ–≥: {last_name}\n"
        f"–ù—ç—Ä: {first_name}"
        )
        await state.finish()

    elif query.data == "back_register":
        await state.finish()
        await query.message.edit_text("–ë—É—Ü–ª–∞–∞. ”®”©—Ä–∏–π–Ω —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä-–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É:")
        await RegisterStates.waiting_for_register_number.set()

# 7. /checkin, /checkout, –±–∞–π—Ä—à–∏–ª –±“Ø—Ä—Ç–≥—ç—Ö, –∑—É—Ä–∞–≥ –±“Ø—Ä—Ç–≥—ç—Ö
@dp.message_handler(commands=['checkin'])
async def checkin_handler(message: types.Message):
    button = KeyboardButton("–ë–∞–π—Ä—à–∏–ª –∏–ª–≥—ç—ç—Ö", request_location=True)
    markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    await message.reply("–¢–∞ –∏—Ä—Å—ç–Ω –±–∞–π—Ä–ª–∞–ª–∞–∞ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.", reply_markup=markup)

@dp.message_handler(content_types=['location'])
async def location_handler(message: types.Message):
    loc = message.location
    user = message.from_user
    add_checkin(
        telegram_user_id=user.id,
        username=user.username if user.username else "",
        register_number="",
        last_name=user.last_name if user.last_name else "",
        first_name=user.first_name if user.first_name else "",
        latitude=loc.latitude,
        longitude=loc.longitude
    )
    await message.reply("–ò—Ä—Å—ç–Ω —Ü–∞–≥, –±–∞–π—Ä—à–∏–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç!", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=['checkout'])
async def checkout_handler(message: types.Message):
    await message.reply("–ê–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä–∞–∞ –±–∏—á—ç—ç–¥, –∑—É—Ä–∞–≥ —Ö–∞–≤—Å–∞—Ä–≥–∞–Ω –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø (–∑—É—Ä–∞–≥—Ç–∞–π —Ö–∞–º—Ç —Ç–∞–π–ª–±–∞—Ä –±–∏—á–∏–∂ —è–≤—É—É–ª–Ω–∞).")

@dp.message_handler(content_types=['photo'])
async def photo_handler(message: types.Message):
    user = message.from_user
    caption = message.caption if message.caption else ''
    photo_file_id = message.photo[-1].file_id if message.photo else ''
    add_checkout(
        telegram_user_id=user.id,
        username=user.username if user.username else "",
        register_number="",
        last_name=user.last_name if user.last_name else "",
        first_name=user.first_name if user.first_name else "",
        work_description=caption,
        photo_url=photo_file_id
    )
    await message.reply("–ì–∞—Ä–∞—Ö —Ü–∞–≥, –∞–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç!")

# 8. –ë–æ—Ç—ã–≥ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö —Ö—ç—Å—ç–≥ (—Ö–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–¥)
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
